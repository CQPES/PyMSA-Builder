#!/usr/bin/env python3

import glob
import os
import shlex
import shutil
import subprocess

REPO_URL = "https://github.com/CQPES/MSA-2.0.git"
REPO_NAME = os.path.basename(REPO_URL).replace(".git", "")

MSA_SRC_PATH = os.path.abspath(os.path.join("MSA-2.0", "src", "emsa"))
MSA_EXEC = os.path.abspath(os.path.join(MSA_SRC_PATH, "msa"))

FORT_POST = os.path.abspath(os.path.join("src", "postemsa.pl"))
FORT_DERI = os.path.abspath(os.path.join("src", "derivative.pl"))

C_POST = os.path.abspath(os.path.join("src", "postemsa_c.pl"))
C_DERI = os.path.abspath(os.path.join("src", "derivative_c.pl"))

BAS_DIR = "basis"
FORT_DIR = "fortran"
PY_DIR = "python"
C_DIR = "c"


def _parse_y_or_n(prompt: str):
    while True:
        inp = input(prompt + " [Y/n] ")
        inp = inp.rstrip().lower()
        if len(inp.rstrip()) == 0 or inp == "y":
            return True
        elif inp == "n":
            return False
        else:
            print(f"Cannot parse input {inp}!")


if __name__ == "__main__":
    # clone repo
    if not os.path.exists(REPO_NAME):
        subprocess.run(args=["git", "clone", REPO_URL])
        print("-" * 80)

    # build msa
    print("Building executable `msa`...")
    subprocess.run(
        args=["make", "clean"],
        cwd=MSA_SRC_PATH,
    )

    subprocess.run(
        args=["make", "all"],
        cwd=MSA_SRC_PATH,
    )

    print("-" * 80)

    # build settings
    py_mod = _parse_y_or_n("Build Python module?")
    c_code = _parse_y_or_n("Generate C code?")

    print("Build settings:")
    print("- Fortran code will be generated by default.")

    if py_mod:
        print("- Python module will be built via `f2py`.")

    if c_code:
        print("- C code will be generated.")

    print("-" * 80)

    # pip settings
    molecule = input("Molecule configuration: ")
    degree = input("Max degree of PIP: ")
    alpha = input(
        "Range parameter alpha for Morse-like variable (default 2.0), "
        "no need to add `d0` suffix: "
    )

    if not alpha:
        alpha = "2.0"

    print("PIP settings:")
    print(f"- Molecule configuration: {molecule}")
    print(f"- Max degree: {degree}")
    print(f"- Range parameter alpha: {alpha}")

    print("-" * 80)

    # basis
    print("Generating PIP basis...")

    if os.path.exists(BAS_DIR):
        shutil.rmtree(BAS_DIR)

    os.makedirs(BAS_DIR)

    subprocess.run(
        args=[MSA_EXEC, degree] + shlex.split(molecule),
        cwd=BAS_DIR,
    )

    # fortran
    print("Generating Fortran code...")

    if os.path.exists(FORT_DIR):
        shutil.rmtree(FORT_DIR)

    os.makedirs(FORT_DIR)

    subprocess.run(
        args=["perl", FORT_POST, degree] + shlex.split(molecule),
        cwd=BAS_DIR,
    )

    subprocess.run(
        args=["perl", FORT_DERI, degree] + shlex.split(molecule),
        cwd=BAS_DIR,
    )

    shutil.move(
        src=os.path.join(BAS_DIR, "basis.f90"),
        dst=os.path.join(FORT_DIR, "basis.f90"),
    )

    shutil.move(
        src=os.path.join(BAS_DIR, "gradient.f90"),
        dst=os.path.join(FORT_DIR, "gradient.f90"),
    )

    subprocess.run(
        args=["perl", "-pi", "-e", r"s/real/real\*8/g", "basis.f90"],
        cwd=FORT_DIR,
    )

    subprocess.run(
        args=["perl", "-pi", "-e", r"s/real/real\*8/g", "gradient.f90"],
        cwd=FORT_DIR,
    )

    subprocess.run(
        args=["perl", "-pi", "-e",
              f"s/a = 2.0d0/a = {alpha}d0/g", "gradient.f90"],
        cwd=FORT_DIR,
    )

    # python
    if py_mod:
        print("Building Python module...")

        subprocess.run(
            args=["f2py", "basis.f90", "gradient.f90", "-m", "msa", "-h",
                  "msa.pyf", "--overwrite-signature"],
            stdout=open(os.devnull, "w"),
            stderr=open(os.devnull, "w"),
            cwd=FORT_DIR,
        )

        subprocess.run(
            args=["f2py", "-c", "basis.f90", "gradient.f90", "msa.pyf"],
            stdout=open(os.devnull, "w"),
            stderr=open(os.devnull, "w"),
            cwd=FORT_DIR,
        )

        if os.path.exists(PY_DIR):
            shutil.rmtree(PY_DIR)

        os.makedirs(PY_DIR)

        py_lib = os.path.basename(
            glob.glob(os.path.join(FORT_DIR, "msa.cpython-*"))[0])

        shutil.move(
            src=os.path.join(FORT_DIR, py_lib),
            dst=os.path.join(PY_DIR, py_lib),
        )

        print("To test Python module `msa`, run command:")
        print("$ python3 -c \"from msa import basis, gradient;"
              "print(basis.__doc__); print(gradient.__doc__)\"")
        print("Please check the output if any error exists!")

    # c
    if c_code:
        print("Generating C code...")

        if os.path.exists(C_DIR):
            shutil.rmtree(C_DIR)

        os.makedirs(C_DIR)

        subprocess.run(
            args=[MSA_EXEC, degree] + shlex.split(molecule),
            cwd=BAS_DIR,
        )

        subprocess.run(
            args=["perl", C_POST, degree] + shlex.split(molecule),
            cwd=BAS_DIR,
        )

        # not implement yet
        # subprocess.run(
        #     args=["perl", C_DERI, degree] + shlex.split(molecule),
        #     cwd=BAS_DIR,
        # )

        shutil.move(
            src=os.path.join(BAS_DIR, "basis.h"),
            dst=os.path.join(C_DIR, "basis.h"),
        )

        shutil.move(
            src=os.path.join(BAS_DIR, "basis.c"),
            dst=os.path.join(C_DIR, "basis.c"),
        )

        # not implement yet
        # shutil.move(
        #     src=os.path.join(BAS_DIR, "gradient.h"),
        #     dst=os.path.join(C_DIR, "gradient.h"),
        # )

        # shutil.move(
        #     src=os.path.join(BAS_DIR, "gradient.c"),
        #     dst=os.path.join(C_DIR, "gradient.c"),
        # )

    print("-" * 80)

    print("Done!")
